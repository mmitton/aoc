package main

import "testing"

func TestMaze(t *testing.T) {
	type TestCase struct {
		name     string
		maze     []string
		expected int
	}

	testCases := []*TestCase{
		&TestCase{"Sample 1", []string{
			"         A           ",
			"         A           ",
			"  #######.#########  ",
			"  #######.........#  ",
			"  #######.#######.#  ",
			"  #######.#######.#  ",
			"  #######.#######.#  ",
			"  #####  B    ###.#  ",
			"BC...##  C    ###.#  ",
			"  ##.##       ###.#  ",
			"  ##...DE  F  ###.#  ",
			"  #####    G  ###.#  ",
			"  #########.#####.#  ",
			"DE..#######...###.#  ",
			"  #.#########.###.#  ",
			"FG..#########.....#  ",
			"  ###########.#####  ",
			"             Z       ",
			"             Z       "}, 23},
		&TestCase{"Sample 2", []string{
			"                   A               ",
			"                   A               ",
			"  #################.#############  ",
			"  #.#...#...................#.#.#  ",
			"  #.#.#.###.###.###.#########.#.#  ",
			"  #.#.#.......#...#.....#.#.#...#  ",
			"  #.#########.###.#####.#.#.###.#  ",
			"  #.............#.#.....#.......#  ",
			"  ###.###########.###.#####.#.#.#  ",
			"  #.....#        A   C    #.#.#.#  ",
			"  #######        S   P    #####.#  ",
			"  #.#...#                 #......VT",
			"  #.#.#.#                 #.#####  ",
			"  #...#.#               YN....#.#  ",
			"  #.###.#                 #####.#  ",
			"DI....#.#                 #.....#  ",
			"  #####.#                 #.###.#  ",
			"ZZ......#               QG....#..AS",
			"  ###.###                 #######  ",
			"JO..#.#.#                 #.....#  ",
			"  #.#.#.#                 ###.#.#  ",
			"  #...#..DI             BU....#..LF",
			"  #####.#                 #.#####  ",
			"YN......#               VT..#....QG",
			"  #.###.#                 #.###.#  ",
			"  #.#...#                 #.....#  ",
			"  ###.###    J L     J    #.#.###  ",
			"  #.....#    O F     P    #.#...#  ",
			"  #.###.#####.#.#####.#####.###.#  ",
			"  #...#.#.#...#.....#.....#.#...#  ",
			"  #.#####.###.###.#.#.#########.#  ",
			"  #...#.#.....#...#.#.#.#.....#.#  ",
			"  #.###.#####.###.###.#.#.#######  ",
			"  #.#.........#...#.............#  ",
			"  #########.###.###.#############  ",
			"           B   J   C               ",
			"           U   P   P               "}, 58},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			m, err := newMaze(testCase.maze)
			if err != nil {
				t.Errorf("ERROR: %v", err)
				return
			}

			steps, err := m.FindShortestPath("AA", "ZZ")
			if err != nil {
				t.Errorf("ERROR: %v", err)
				return
			}

			if testCase.expected != steps {
				t.Errorf("ERROR: Expected %v, got %v", testCase.expected, steps)
				return
			} else {
				t.Logf("Expected %v, got %v", testCase.expected, steps)
			}
		})
	}
}
